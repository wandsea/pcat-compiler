====+==============================================
  1 | PROGRAM IS
  2 | BEGIN
  3 |   WRITE([Empty Expression]);
  4 |   WRITE("INTEGER arithmic operations");
  5 |   WRITE(1, " 1");
  6 |   WRITE((- 1), " -1");
  7 |   WRITE((1 + 2), " 3");
  8 |   WRITE((1 - 2), " -1");
  9 |   WRITE((3 * 5), " 15");
 10 |   WRITE((1243  div  123), " 10");
 11 |   WRITE((1243  mod  123), " 13");
 12 |   WRITE((- 123), " -123");
 13 |   WRITE((+ 123), " 123");
 14 |   WRITE([Empty Expression]);
 15 |   WRITE("REAL operations");
 16 |   WRITE(1.000000, " 1.0");
 17 |   WRITE((- 1.000000), " -1.0");
 18 |   WRITE((1.000000 + 2.000000), " 3.0");
 19 |   WRITE((1.000000 - 2.000000), " -1.0");
 20 |   WRITE((3.000000 * 2.000000), " 6.0");
 21 |   WRITE((3.000000 / 2.000000), " 1.5");
 22 |   WRITE((- 3.000000), " -3.0");
 23 |   WRITE((+ 3.000000), " 3.0");
 24 |   WRITE([Empty Expression]);
 25 |   WRITE("INTEGER/REAL mixed operations");
 26 |   WRITE((1 + 2.000000), " 3.0");
 27 |   WRITE((1.000000 - 2), " -1.0");
 28 |   WRITE((1.000000 * 8), " 8.0");
 29 |   WRITE((1.000000 / 8), " 0.125");
 30 |   WRITE((1 / 8), " 0.125");
 31 |   WRITE([Empty Expression]);
 32 |   WRITE("BOOLEAN operations");
 33 |   WRITE(TRUE, " TRUE");
 34 |   WRITE(FALSE, " FALSE");
 35 |   WRITE((TRUE  and  TRUE), " TRUE");
 36 |   WRITE((TRUE  and  FALSE), " FALSE");
 37 |   WRITE((FALSE  and  FALSE), " FALSE");
 38 |   WRITE((TRUE  or  TRUE), " TRUE");
 39 |   WRITE((TRUE  or  FALSE), " TRUE");
 40 |   WRITE((FALSE  or  FALSE), " FALSE");
 41 |   WRITE(( not  FALSE), " TRUE");
 42 |   WRITE(( not  TRUE), " FALSE");
 43 |   WRITE([Empty Expression]);
 44 |   WRITE("INTEGER comparative operations");
 45 |   WRITE((1 > 2), " FALSE");
 46 |   WRITE((1 < 2), " TRUE");
 47 |   WRITE((1 = 2), " FALSE");
 48 |   WRITE((1 >= 2), " FALSE");
 49 |   WRITE((1 <= 2), " TRUE");
 50 |   WRITE((1 <> 2), " TRUE");
 51 |   WRITE((1 > 1), " FALSE");
 52 |   WRITE((1 < 1), " FALSE");
 53 |   WRITE((1 = 1), " TRUE");
 54 |   WRITE((1 >= 1), " TRUE");
 55 |   WRITE((1 <= 1), " TRUE");
 56 |   WRITE((1 <> 1), " FALSE");
 57 |   WRITE((2 > 1), " TRUE");
 58 |   WRITE((2 < 1), " FALSE");
 59 |   WRITE((2 = 1), " FALSE");
 60 |   WRITE((2 >= 1), " TRUE");
 61 |   WRITE((2 <= 1), " FALSE");
 62 |   WRITE((2 <> 1), " TRUE");
 63 |   WRITE((1.000000 > 2.000000), " FALSE");
 64 |   WRITE((1.000000 < 2.000000), " TRUE");
 65 |   WRITE((1.000000 = 2.000000), " FALSE");
 66 |   WRITE((1.000000 >= 2.000000), " FALSE");
 67 |   WRITE((1.000000 <= 2.000000), " TRUE");
 68 |   WRITE((1.000000 <> 2.000000), " TRUE");
 69 |   WRITE((1.000000 > 1.000000), " FALSE");
 70 |   WRITE((1.000000 < 1.000000), " FALSE");
 71 |   WRITE((1.000000 = 1.000000), " TRUE");
 72 |   WRITE((1.000000 >= 1.000000), " TRUE");
 73 |   WRITE((1.000000 <= 1.000000), " TRUE");
 74 |   WRITE((1.000000 <> 1.000000), " FALSE");
 75 |   WRITE((2.000000 > 1.000000), " TRUE");
 76 |   WRITE((2.000000 < 1.000000), " FALSE");
 77 |   WRITE((2.000000 = 1.000000), " FALSE");
 78 |   WRITE((2.000000 >= 1.000000), " TRUE");
 79 |   WRITE((2.000000 <= 1.000000), " FALSE");
 80 |   WRITE((2.000000 <> 1.000000), " TRUE");
 81 | END;
====+==============================================
Type Checking finished *SUCCESSFULLY*
